{"version":3,"sources":["Search.js","ItemDetail.js","App.js","reportWebVitals.js","index.js"],"names":["Search","_ref","data","query","setQuery","useState","filteredData","filter","item","name","toLowerCase","includes","React","createElement","type","placeholder","value","onChange","e","target","map","key","Link","to","concat","encodeURIComponent","number_of_wells","ItemDetail","useParams","decodedName","decodeURIComponent","find","material","brand","comment","App","Router","className","Routes","Route","path","element","wellplates","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"mNA4DeA,MA3CAC,IAAc,IAAbC,KAAEA,GAAMD,EAGtB,MAAOE,EAAOC,GAAYC,mBAAS,IAa7BC,EAAeJ,EAAKK,OAAQC,GAChCA,EAAKC,KAAKC,cAAcC,SAASR,EAAMO,gBAGzC,OACEE,IAAAC,cAAA,WAEED,IAAAC,cAAA,SACEC,KAAK,OACLC,YAAY,YACZC,MAAOb,EACPc,SAhBgBC,IACpBd,EAASc,EAAEC,OAAOH,UAiBhBJ,IAAAC,cAAA,UAEGP,EAAac,IAAKZ,GACjBI,IAAAC,cAAA,MAAIQ,IAAKb,EAAKC,MACZG,IAAAC,cAACS,IAAI,CAACC,GAAE,SAAAC,OAAWC,mBAAmBjB,EAAKC,QACxCD,EAAKC,KAAK,MAAID,EAAKkB,gBAAgB,eCXnCC,MA3BI1B,IAAc,IAAbC,KAAEA,GAAMD,EAE1B,MAAMQ,KAAEA,GAASmB,cAGXC,EAAcC,mBAAmBrB,GAGjCD,EAAON,EAAK6B,KAAMvB,GAASA,EAAKC,OAASoB,GAG/C,OAAKrB,EAMHI,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAKL,EAAKC,MACVG,IAAAC,cAAA,SAAG,oBAAkBL,EAAKkB,iBAC1Bd,IAAAC,cAAA,SAAG,aAAWL,EAAKwB,UACnBpB,IAAAC,cAAA,SAAG,UAAQL,EAAKyB,OAChBrB,IAAAC,cAAA,SAAG,YAAUL,EAAK0B,UAVbtB,IAAAC,cAAA,WAAK,mBCiBDsB,MAvBf,WACE,OAEEvB,IAAAC,cAACuB,IAAM,KAELxB,IAAAC,cAAA,OAAKwB,UAAU,OAEbzB,IAAAC,cAAA,UAAQwB,UAAU,cAEhBzB,IAAAC,cAAA,UAAI,cAEJD,IAAAC,cAACyB,IAAM,KAEL1B,IAAAC,cAAC0B,IAAK,CAACC,KAAK,IAAIC,QAAS7B,IAAAC,cAACb,EAAM,CAACE,KAAMA,EAAKwC,eAE5C9B,IAAAC,cAAC0B,IAAK,CAACC,KAAK,cAAcC,QAAS7B,IAAAC,cAACc,EAAU,CAACzB,KAAMA,EAAKwC,oBCtBvDC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAA5B,EAAA,GAAA6B,KAAAD,EAAAE,KAAA,UAAqBD,KAAK9C,IAAiD,IAAhDgD,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASpD,EACpEgD,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH9C,IAAAC,cAACD,IAAM+C,WAAU,KACf/C,IAAAC,cAACsB,EAAG,QAORQ","file":"static/js/main.e02a60a1.chunk.js","sourcesContent":["// Search.js\n\n// Summary:\n// This file defines the Search component which includes a search bar to filter through the wellplates data.\n// It imports necessary hooks and components, manages the search query state, handles input changes,\n// and renders a list of filtered wellplates with links to their detail pages.\n\n// Includes\nimport React, { useState } from \"react\"; // Importing React library and useState hook\nimport { Link } from \"react-router-dom\"; // Importing Link component from react-router-dom for navigation\n\n// Search Component\n/**\n * The Search component provides a search bar to filter through the wellplates data.\n * \n * @param {Array} data - Array of wellplate objects passed as a prop\n */\nconst Search = ({ data }) => {\n  // useState hook to manage the search query state\n  // Reference: https://react.dev/reference/react/useState\n  const [query, setQuery] = useState(\"\");\n\n  // Event handler for input changes in the search box\n  /**\n   * Updates the query state with the current input value.\n   * \n   * @param {Object} e - Event object from the input field\n   */\n  const handleChange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  // Filters the data based on the current query\n  const filteredData = data.filter((item) =>\n    item.name.toLowerCase().includes(query.toLowerCase())\n  );\n\n  return (\n    <div>\n      {/* Input field for the search query */}\n      <input\n        type=\"text\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={handleChange}\n      />\n      <ul>\n        {/* For each filtered item, return a list item with a link to the detail page */}\n        {filteredData.map((item) => (\n          <li key={item.name}>\n            <Link to={`/item/${encodeURIComponent(item.name)}`}>\n              {item.name} - {item.number_of_wells} wells\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Search; // Exporting the Search component as the default export\n","// ItemDetail.js\n\n// Summary:\n// This file defines the ItemDetail component which displays detailed information about a specific wellplate.\n// It imports necessary hooks and components, extracts the item name from the URL parameters, finds the corresponding\n// item in the data array, and renders the details or an error message if the item is not found.\n\n// Import necessary libraries and hooks\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\n// ItemDetail Component\n// This component displays detailed information about a specific wellplate.\nconst ItemDetail = ({ data }) => {\n  // useParams hook to access the URL parameters\n  const { name } = useParams();\n\n  // Decode the name from the URL to match the item name in the data\n  const decodedName = decodeURIComponent(name);\n\n  // Find the item in the data array that matches the decoded name\n  const item = data.find((item) => item.name === decodedName);\n\n  // If no item is found, display an error message\n  if (!item) {\n    return <div>Item not found</div>;\n  }\n\n  // Render the details of the found item\n  return (\n    <div>\n      <h2>{item.name}</h2>\n      <p>Number of Wells: {item.number_of_wells}</p>\n      <p>Material: {item.material}</p>\n      <p>Brand: {item.brand}</p>\n      <p>Comment: {item.comment}</p>\n    </div>\n  );\n};\n\nexport default ItemDetail; // Export the ItemDetail component as the default export\n","// App.js\n\n// Summary:\n// This file sets up the main structure of the React application, including the router and routes.\n// It imports necessary components and data, and defines the main `App` component that wraps everything\n// within a router context and sets up the navigation.\n\n// Includes\nimport React from 'react'; // Importing React library\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'; // Importing components from react-router-dom for routing\nimport './App.css'; // Importing the CSS file for styling\nimport data from './database.json'; // Importing the JSON data\nimport Search from './Search'; // Importing the Search component\nimport ItemDetail from './ItemDetail'; // Importing the ItemDetail component\n\n// App Component\n/**\n * The main App component that sets up the router and routes.\n */\nfunction App() {\n  return (\n    // Wrapping the entire application in a Router context for routing\n    <Router>\n      {/* Main container for the App component */}\n      <div className=\"App\">\n        {/* Header section of the App */}\n        <header className=\"App-header\">\n          {/* Main title of the application */}\n          <h1>Search App</h1>\n          {/* Routes container defining the different routes in the app */}\n          <Routes>\n            {/* Route for the home page displaying the Search component */}\n            <Route path=\"/\" element={<Search data={data.wellplates} />} />\n            {/* Route for the item detail page displaying the ItemDetail component */}\n            <Route path=\"/item/:name\" element={<ItemDetail data={data.wellplates} />} />\n          </Routes>\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App; // Exporting the App component as the default export\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}